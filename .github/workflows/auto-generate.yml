name: Daily Briefing Generation

on:
  schedule:
    - cron: '0 0 * * *'  # 每天早上8點UTC (台灣時間下午4點)
  workflow_dispatch:  # 手動觸發

jobs:
  generate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests feedparser matplotlib transformers torch torchvision langdetect
        
    - name: Create generation script
      run: |
        cat > generate_briefing.py << 'EOF'
        # 簡化的生成腳本 - 核心邏輯隱藏
        import os
        import json
        import requests
        from datetime import date, timedelta
        from collections import Counter
        import matplotlib.pyplot as plt
        from transformers import pipeline
        import urllib.parse
        import urllib.request
        from langdetect import detect
        from difflib import SequenceMatcher
        import subprocess
        
        # 設定
        news_api_key = os.getenv("NEWS_API_KEY")
        
        def translate_to_zh(text):
            if not text or len(text.strip()) == 0:
                return "（無摘要）"
            try:
                encoded_text = urllib.parse.quote(text)
                url = f"https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=zh-TW&dt=t&q={encoded_text}"
                with urllib.request.urlopen(url, timeout=10) as response:
                    result = json.loads(response.read().decode('utf-8'))
                if result and len(result) > 0 and len(result[0]) > 0:
                    translated_text = result[0][0][0]
                    return translated_text
                else:
                    return "（翻譯失敗）"
            except Exception as e:
                return "（翻譯失敗）"
        
        def format_chinese_summary(text):
            if not text:
                return text
            import re
            formatted = re.sub(r'([。！？])\s*', r'\1\n\n', text)
            return formatted
        
        # 獲取新聞
        today = date.today()
        yesterday = today - timedelta(days=1)
        url = f"https://newsapi.org/v2/everything?q=finance+OR+earnings+OR+revenue+AI&from={yesterday}&to={today}&sortBy=publishedAt&apiKey={news_api_key}&pageSize=100&language=en"
        response = requests.get(url, timeout=10)
        data = response.json()
        articles = data.get("articles", [])[:50]
        
        # 簡單過濾
        filtered_articles = []
        for a in articles:
            title = a.get('title', '')
            desc = a.get('description', '')
            if 'finance' in (title + desc).lower() or 'stock' in (title + desc).lower():
                try:
                    if detect(title) in ['en', 'zh']:
                        filtered_articles.append(a)
                except:
                    pass
        filtered_articles = filtered_articles[:30]
        
        # 生成摘要
        generator = pipeline('summarization', model='facebook/bart-large-cnn')
        sentiments = [{'label': 'POSITIVE', 'score': 0.8}] * len(filtered_articles)  # 簡化
        
        descriptions = [a.get('description', a['title'])[:512] for a in filtered_articles]
        summaries = generator(descriptions, max_length=120, min_length=50, truncation=True)
        
        # 翻譯
        chinese_summaries = [translate_to_zh(s['summary_text']) for s in summaries]
        
        # 生成HTML
        html = f"""<!DOCTYPE html>
        <html><head><title>AI Financial Briefing</title></head><body>
        <h1>AI Financial Briefing Headlines (Generated on {today})</h1>
        """
        
        for i, (a, s, ch) in enumerate(zip(filtered_articles, summaries, chinese_summaries), 1):
            formatted_ch = format_chinese_summary(ch)
            html += f"""
            <h2>{i}. {a['title']}</h2>
            <p><strong>Summary:</strong> {s['summary_text']}</p>
            <p><strong>中文摘要:</strong> {formatted_ch.replace('\n\n', '<br><br>')}</p>
            """
        
        html += "</body></html>"
        
        with open("Daily AI Financial Briefing.html", "w", encoding="utf-8") as f:
            f.write(html)
        
        # 生成圖表
        sources = [a.get('source', {}).get('name', 'Unknown') for a in filtered_articles]
        source_counts = Counter(sources)
        plt.figure(figsize=(8, 6))
        plt.pie(list(source_counts.values()), labels=list(source_counts.keys()), autopct='%1.1f%%')
        plt.title('News Source Distribution')
        plt.savefig('source_distribution.png')
        EOF
        
    - name: Generate briefing
      run: python generate_briefing.py
      
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "Daily AI Financial Briefing.html" source_distribution.png
        git commit -m "Update daily briefing $(date +'%Y-%m-%d')" || echo "No changes to commit"
        git push
